<%= form_with url: "#", id: "form_search", method: :get do |form| %>
  <%= form.label :query, "Search for:" %>
  <%= form.text_field :q %>  <%# predicthq: "q", ticketmaster: "keyword" %>
  <%= form.date_field :start_date %>  <%# predicthq: "start.gte", ticketmaster: "startDateTime" %>
  <%= form.date_field :end_date %>  <%# predicthq: "start.lte", ticketmaster: "endDateTime" %>

  <%= form.label :luogo, "Where:" %>
  <%= form.text_field :loc, id:"pac-input", class:"controls", placeholder:"nowhere" %> <%# predicthq: "within=Xkm@lat,long", ticketmaster: "geoPoint" <input name="loc"/> %>
  <div class="form-check form-switch">
    <%= form.check_box :current_location, class: "form-check-input", role: "switch", id: "flexSwitchCheckDefault" %>
    <label class="form-check-label" id="form-check-label" for="flexSwitchCheckDefault">Utilizza la tua posizione corrente</label>
  </div>

  <%= form.select :category, ["nessuno", "Academic", "Sports", "Conforences", "Expos", 
                                "Concerts", "Festivals", "Performing-arts", "Community", 
                                "Live TV Events", "Public Holidays", "School Holidays", 
                                "Observances", "Politics", "Daylight Savings", "Severe Weather",
                                "Disasters", "Airport Delays", "Health Warnings", "Terror"], selected: "nessuno" %>
  <%= form.submit "Search" , onclick: "return validation()"%>
<% end %>



<script>
  let check_label = document.getElementById("form-check-label");
  let checkbox = document.getElementById("flexSwitchCheckDefault");
  let position_text_input = document.getElementById("pac-input");

  checkbox.addEventListener("change", is_check, false);
  function is_check(){
    if (checkbox.checked){
      check_label.value = "loading..."
      check_label.innerHTML = "loading..."

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition, showError);
      } else {
        // posizione non trovata
        check_label.value = "Geolocation is not supported by this browser";
        check_label.innerHTML = "Geolocation is not supported by this browser";
      }
    }
  }
  function showPosition(position) {
    const coordinates = position.coords.latitude + "," + position.coords.longitude;
    position_text_input.value = coordinates;
    check_label.value = coordinates;
    check_label.innerHTML = coordinates;
  }
  function showError(error) {
    switch(error.code) {
        case error.PERMISSION_DENIED:
            x.innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            x.innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            x.innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            x.innerHTML = "An unknown error occurred."
            break;
    }
  }

  // se si vuole utilizzare la current position, submit aspetta di avere le coordinate
  function validation(){
    if (document.getElementById("mostra").value == "loading...") { console.log("Wait for it"); return false; }
    document.getElementById("form_search").submit();
  }
</script>


<%# 
GOOGLE MAPS API FUNZIONANTI, MA MANCANO LE AUTORIZZAZIONI A GOOGLE

<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlkmF4KWwLQkuuIH00uen5o6lXA_ly6Ts&callback=initAutocomplete&libraries=places&v=weekly"
  defer
></script>

<script defer>var exports = {};</script>
<script defer>
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: -33.8688, lng: 151.2195 },
        zoom: 13,
        mapTypeId: "roadmap",
    });
    // Create the search box and link it to the UI element.
    var input = document.getElementById("pac-input");
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
    // Bias the SearchBox results towards current map's viewport.
    map.addListener("bounds_changed", function () {
        searchBox.setBounds(map.getBounds());
    });
    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener("places_changed", function () {
        var places = searchBox.getPlaces();
        if (places.length == 0) {
            return;
        }
        // Clear out the old markers.
        markers.forEach(function (marker) {
            marker.setMap(null);
        });
        markers = [];
        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function (place) {
            if (!place.geometry || !place.geometry.location) {
                console.log("Returned place contains no geometry");
                return;
            }
            var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25),
            };
            // Create a marker for each place.
            markers.push(new google.maps.Marker({
                map: map,
                icon: icon,
                title: place.name,
                position: place.geometry.location,
            }));
            if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
            }
            else {
                bounds.extend(place.geometry.location);
            }
        });
        map.fitBounds(bounds);
    });
}
window.initAutocomplete = initAutocomplete;
</script>

<style>
#map {
  height: 100%;
}
</style> %>